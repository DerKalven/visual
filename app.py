# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10XE_HRqs9QCaGhduMnLKAqojnRb3mHKS
"""

import pandas as pd
import plotly.express as px
import dash
from dash import dcc, html
from dash.dependencies import Input, Output
import flask
import os

# Cargar datos (Reemplaza con la ruta real de tu archivo CSV)
df = pd.read_csv(r"C:\Users\jose.castillo\OneDrive - Colegio Hacienda Los Alcaparros\2024-2025_Jose.Castillo\Downloads\CasosSE.csv")

# Convertir columnas a valores numéricos
df["Latitud"] = pd.to_numeric(df["Latitud"], errors="coerce")
df["Longitud"] = pd.to_numeric(df["Longitud"], errors="coerce")
df["Año"] = pd.to_numeric(df["Año"], errors="coerce")
df["Total de Víctimas del Caso"] = pd.to_numeric(df["Total de Víctimas del Caso"], errors="coerce")

# Ordenar los datos por Año
df = df.sort_values(by="Año")

# Obtener valores mínimo y máximo de víctimas
min_victimas = df["Total de Víctimas del Caso"].min()
max_victimas = df["Total de Víctimas del Caso"].max()

# Crear el servidor Flask
server = flask.Flask(__name__)

# Inicializar la aplicación Dash
app = dash.Dash(__name__, server=server)

# Layout de la aplicación
app.layout = html.Div([
    dcc.Graph(id="bar-chart"),
    dcc.Graph(id="mapa"),
    dcc.Slider(
        id="year-slider",
        min=df["Año"].min(),
        max=df["Año"].max(),
        value=df["Año"].min(),
        marks={str(year): str(year) for year in df["Año"].unique()},
        step=None
    )
])

# Callback para actualizar el mapa y gráfico de barras
@app.callback(
    [Output("mapa", "figure"), Output("bar-chart", "figure")],
    [Input("year-slider", "value"), Input("bar-chart", "clickData")]
)
def update_graphs(selected_year, bar_click):
    filtered_df = df[df["Año"] == selected_year]

    fig_map = px.scatter_mapbox(
        filtered_df,
        lat="Latitud",
        lon="Longitud",
        size="Total de Víctimas del Caso",
        color="Total de Víctimas del Caso",
        hover_name="Año",
        hover_data=["Total de Víctimas del Caso"],
        mapbox_style="carto-positron",
        zoom=5,
        height=500,
        range_color=[min_victimas, max_victimas],
        size_max=30
    )

    fig_map.update_layout(mapbox=dict(center=dict(lat=df["Latitud"].mean(), lon=df["Longitud"].mean())), dragmode="zoom")

    df_bar = df.groupby("Año")["Total de Víctimas del Caso"].sum().reset_index()

    fig_bar = px.bar(
        df_bar, x="Año", y="Total de Víctimas del Caso",
        title="Total de Víctimas por Año",
        height=300
    )

    return fig_map, fig_bar

# Ejecutar la app en un servidor
if __name__ == "__main__":
    port = int(os.environ.get("PORT", 8050))
    app.run_server(host="0.0.0.0", port=port, debug=False)